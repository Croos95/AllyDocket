// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\10"+
    "\1\14\1\15\1\10\1\16\1\17\1\20\1\21\1\22"+
    "\10\23\1\0\1\10\1\24\1\25\1\26\2\0\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\40\1\54\1\55\1\56"+
    "\1\10\1\0\1\10\1\0\1\57\1\0\1\60\2\40"+
    "\1\61\1\62\1\63\5\40\1\64\2\40\1\65\2\40"+
    "\1\66\1\67\2\40\1\70\4\40\1\10\1\71\1\10"+
    "\7\0\1\3\73\0\1\40\7\0\1\40\3\0\1\40"+
    "\3\0\1\40\1\0\1\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\40\7\0\1\40\3\0\1\40\3\0\1\40"+
    "\1\0\1\40\6\0\1\40\1\0\1\40\u012b\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\1\1\3\1\1\2\3"+
    "\4\1\2\4\21\1\1\3\3\1\1\5\1\0\1\6"+
    "\1\0\1\3\1\0\12\1\1\7\20\1\4\2\1\0"+
    "\2\10\2\1\1\7\24\1\1\7\56\1\1\11\6\1"+
    "\1\12\11\1\1\13\7\1\1\14\4\1\1\7\25\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\350\0\u0122\0\72"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0536\0\u0740\0\u077a\0\u07b4\0\72\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0536\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u089c"+
    "\0\u0862\0\u0ef4\0\u0f2e\0\u0f68\0\72\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u0536\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u0536\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u0536\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u0536\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\10\1\17"+
    "\1\20\2\21\1\22\1\5\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\32\1\33\1\32\1\34\1\35"+
    "\2\32\1\36\1\32\1\37\1\40\1\41\1\32\1\42"+
    "\3\32\1\43\3\32\1\44\4\32\1\45\1\46\74\0"+
    "\1\3\114\0\1\10\52\0\1\47\20\0\42\50\30\0"+
    "\42\51\12\0\1\10\72\0\1\10\74\0\2\10\67\0"+
    "\1\10\72\0\1\10\4\0\2\21\64\0\1\10\3\0"+
    "\2\21\46\0\20\52\1\53\51\52\17\0\1\54\71\0"+
    "\1\54\1\0\3\21\72\0\2\10\71\0\2\10\64\0"+
    "\3\32\3\0\1\32\1\55\16\32\1\56\21\32\22\0"+
    "\3\32\3\0\15\32\1\57\24\32\22\0\3\32\3\0"+
    "\15\32\1\60\24\32\22\0\3\32\3\0\4\32\1\61"+
    "\3\32\1\62\31\32\22\0\3\32\3\0\14\32\1\63"+
    "\10\32\1\64\14\32\22\0\3\32\3\0\1\65\41\32"+
    "\22\0\3\32\3\0\42\32\22\0\3\32\3\0\6\32"+
    "\1\66\33\32\22\0\3\32\3\0\14\32\1\67\1\70"+
    "\24\32\22\0\3\32\3\0\1\71\1\32\1\72\1\32"+
    "\1\73\10\32\1\74\5\32\1\75\16\32\22\0\3\32"+
    "\3\0\15\32\1\76\2\32\1\77\21\32\22\0\3\32"+
    "\3\0\1\100\3\32\1\101\35\32\22\0\3\32\3\0"+
    "\4\32\1\102\3\32\1\67\12\32\1\103\16\32\22\0"+
    "\3\32\3\0\1\102\3\32\1\104\35\32\22\0\3\32"+
    "\3\0\1\105\41\32\22\0\3\32\3\0\31\32\1\106"+
    "\10\32\22\0\3\32\3\0\33\32\1\107\6\32\72\0"+
    "\1\10\6\0\1\47\12\0\3\50\3\0\42\50\22\0"+
    "\3\51\3\0\42\51\1\0\20\52\1\3\51\52\2\110"+
    "\1\111\1\110\1\112\13\110\1\113\51\110\15\0\2\114"+
    "\2\0\1\115\2\116\67\0\3\32\3\0\21\32\1\67"+
    "\20\32\22\0\3\32\3\0\2\32\1\117\37\32\22\0"+
    "\3\32\3\0\15\32\1\120\24\32\22\0\3\32\3\0"+
    "\21\32\1\121\20\32\22\0\3\32\3\0\2\32\1\122"+
    "\16\32\1\123\20\32\22\0\3\32\3\0\5\32\1\124"+
    "\16\32\1\125\15\32\22\0\3\32\3\0\22\32\1\126"+
    "\17\32\22\0\3\32\3\0\16\32\1\67\23\32\22\0"+
    "\3\32\3\0\2\32\1\127\37\32\22\0\3\32\3\0"+
    "\23\32\1\130\16\32\22\0\3\32\3\0\6\32\1\131"+
    "\33\32\22\0\3\32\3\0\26\32\1\132\13\32\22\0"+
    "\3\32\3\0\3\32\1\67\7\32\1\67\26\32\22\0"+
    "\3\32\3\0\3\32\1\133\10\32\1\132\25\32\22\0"+
    "\3\32\3\0\3\32\1\134\36\32\22\0\3\32\3\0"+
    "\12\32\1\135\27\32\22\0\3\32\3\0\22\32\1\136"+
    "\17\32\22\0\3\32\3\0\15\32\1\137\24\32\22\0"+
    "\3\32\3\0\10\32\1\140\31\32\22\0\3\32\3\0"+
    "\3\32\1\141\12\32\1\142\2\32\1\143\20\32\22\0"+
    "\3\32\3\0\14\32\1\121\25\32\22\0\3\32\3\0"+
    "\13\32\1\144\26\32\22\0\3\32\3\0\25\32\1\145"+
    "\14\32\22\0\3\32\3\0\20\32\1\146\21\32\22\0"+
    "\3\32\3\0\35\32\1\147\4\32\22\0\3\32\3\0"+
    "\37\32\1\150\2\32\1\0\2\52\1\111\15\52\1\3"+
    "\51\52\2\113\1\3\1\113\1\4\65\113\22\0\2\116"+
    "\67\0\3\116\67\0\3\32\3\0\2\32\1\151\16\32"+
    "\1\152\1\153\17\32\22\0\3\32\3\0\12\32\1\154"+
    "\27\32\22\0\3\32\3\0\30\32\1\155\11\32\22\0"+
    "\3\32\3\0\10\32\1\156\31\32\22\0\3\32\3\0"+
    "\24\32\1\157\15\32\22\0\3\32\3\0\4\32\1\160"+
    "\35\32\22\0\3\32\3\0\10\32\1\161\31\32\22\0"+
    "\3\32\3\0\4\32\1\162\35\32\22\0\3\32\3\0"+
    "\22\32\1\67\17\32\22\0\3\32\3\0\1\163\41\32"+
    "\22\0\1\32\1\164\1\32\3\0\42\32\22\0\3\32"+
    "\3\0\15\32\1\165\24\32\22\0\3\32\3\0\10\32"+
    "\1\166\31\32\22\0\3\32\3\0\23\32\1\167\16\32"+
    "\22\0\3\32\3\0\22\32\1\170\17\32\22\0\3\32"+
    "\3\0\4\32\1\171\35\32\22\0\3\32\3\0\2\32"+
    "\1\172\10\32\1\173\26\32\22\0\3\32\3\0\27\32"+
    "\1\174\12\32\22\0\3\32\3\0\15\32\1\175\24\32"+
    "\22\0\3\32\3\0\4\32\1\176\35\32\22\0\3\32"+
    "\3\0\22\32\1\144\17\32\22\0\3\32\3\0\1\67"+
    "\41\32\22\0\3\32\3\0\22\32\1\177\17\32\22\0"+
    "\3\32\3\0\10\32\1\200\31\32\22\0\3\32\3\0"+
    "\40\32\1\201\1\32\22\0\3\32\3\0\32\32\1\202"+
    "\7\32\22\0\3\32\3\0\15\32\1\55\24\32\22\0"+
    "\3\32\3\0\4\32\1\203\35\32\22\0\3\32\3\0"+
    "\1\203\41\32\22\0\3\32\3\0\4\32\1\204\35\32"+
    "\22\0\3\32\3\0\7\32\1\67\32\32\22\0\3\32"+
    "\3\0\13\32\1\205\26\32\22\0\3\32\3\0\4\32"+
    "\1\206\35\32\22\0\3\32\3\0\20\32\1\207\21\32"+
    "\22\0\3\32\3\0\21\32\1\210\20\32\22\0\3\32"+
    "\3\0\20\32\1\211\21\32\22\0\3\32\3\0\12\32"+
    "\1\212\27\32\22\0\1\67\2\32\3\0\42\32\22\0"+
    "\3\32\3\0\20\32\1\213\21\32\22\0\3\32\3\0"+
    "\1\214\41\32\22\0\3\32\3\0\12\32\1\215\27\32"+
    "\22\0\3\32\3\0\10\32\1\216\31\32\22\0\3\32"+
    "\3\0\14\32\1\217\25\32\22\0\3\32\3\0\4\32"+
    "\1\220\35\32\22\0\3\32\3\0\4\32\1\221\35\32"+
    "\22\0\3\32\3\0\30\32\1\222\11\32\22\0\3\32"+
    "\3\0\14\32\1\223\25\32\22\0\3\32\3\0\22\32"+
    "\1\224\17\32\22\0\3\32\3\0\15\32\1\225\24\32"+
    "\22\0\3\32\3\0\1\226\41\32\22\0\3\32\3\0"+
    "\36\32\1\67\3\32\22\0\3\32\3\0\31\32\1\227"+
    "\10\32\22\0\3\32\3\0\14\32\1\67\25\32\22\0"+
    "\3\32\3\0\1\230\41\32\22\0\3\32\3\0\1\231"+
    "\41\32\22\0\3\32\3\0\21\32\1\143\20\32\22\0"+
    "\3\32\3\0\4\32\1\232\35\32\22\0\3\32\3\0"+
    "\10\32\1\233\31\32\22\0\3\32\3\0\15\32\1\234"+
    "\24\32\22\0\3\32\3\0\30\32\1\144\11\32\22\0"+
    "\3\32\3\0\30\32\1\235\11\32\22\0\3\32\3\0"+
    "\14\32\1\144\25\32\22\0\3\32\3\0\15\32\1\67"+
    "\24\32\22\0\3\32\3\0\16\32\1\236\23\32\22\0"+
    "\3\32\3\0\2\32\1\237\37\32\22\0\3\32\3\0"+
    "\21\32\1\151\20\32\22\0\3\32\3\0\3\32\1\240"+
    "\36\32\22\0\3\32\3\0\2\32\1\67\11\32\1\67"+
    "\25\32\22\0\3\32\3\0\3\32\1\241\36\32\22\0"+
    "\3\32\3\0\10\32\1\242\31\32\22\0\3\32\3\0"+
    "\1\32\1\243\40\32\22\0\3\32\3\0\32\32\1\244"+
    "\7\32\22\0\3\32\3\0\14\32\1\245\25\32\22\0"+
    "\3\32\3\0\12\32\1\246\27\32\22\0\3\32\3\0"+
    "\14\32\1\247\25\32\22\0\3\32\3\0\15\32\1\203"+
    "\24\32\22\0\3\32\3\0\15\32\1\250\1\32\1\251"+
    "\22\32\22\0\3\32\3\0\12\32\1\252\27\32\22\0"+
    "\3\32\3\0\10\32\1\144\31\32\22\0\3\32\3\0"+
    "\10\32\1\215\31\32\22\0\3\32\3\0\4\32\1\253"+
    "\35\32\22\0\3\32\3\0\20\32\1\67\21\32\22\0"+
    "\3\32\3\0\12\32\1\254\27\32\22\0\3\32\3\0"+
    "\33\32\1\255\6\32\22\0\3\32\3\0\15\32\1\256"+
    "\24\32\22\0\3\32\3\0\22\32\1\257\17\32\22\0"+
    "\3\32\3\0\30\32\1\260\11\32\22\0\3\32\3\0"+
    "\23\32\1\261\16\32\22\0\3\32\3\0\10\32\1\262"+
    "\31\32\22\0\3\32\3\0\15\32\1\263\24\32\22\0"+
    "\3\32\3\0\4\32\1\55\35\32\22\0\3\32\3\0"+
    "\37\32\1\264\2\32\22\0\3\32\3\0\4\32\1\265"+
    "\35\32\22\0\3\32\3\0\10\32\1\266\31\32\22\0"+
    "\3\32\3\0\4\32\1\67\35\32\22\0\3\32\3\0"+
    "\2\32\1\267\37\32\22\0\3\32\3\0\30\32\1\270"+
    "\11\32\22\0\3\32\3\0\36\32\1\271\3\32\22\0"+
    "\3\32\3\0\30\32\1\272\11\32\22\0\3\32\3\0"+
    "\6\32\1\273\33\32\22\0\3\32\3\0\1\274\41\32"+
    "\22\0\3\32\3\0\13\32\1\275\26\32\22\0\3\32"+
    "\3\0\13\32\1\276\26\32\22\0\3\32\3\0\3\32"+
    "\1\261\36\32\22\0\3\32\3\0\23\32\1\277\16\32"+
    "\22\0\3\32\3\0\2\32\1\210\37\32\22\0\3\32"+
    "\3\0\1\55\3\32\1\300\35\32\22\0\3\32\3\0"+
    "\10\32\1\301\31\32\22\0\3\32\3\0\1\302\41\32"+
    "\22\0\3\32\3\0\14\32\1\151\25\32\22\0\3\32"+
    "\3\0\4\32\1\303\35\32\22\0\3\32\3\0\12\32"+
    "\1\304\27\32\22\0\3\32\3\0\14\32\1\305\25\32"+
    "\22\0\3\32\3\0\30\32\1\306\11\32\22\0\3\32"+
    "\3\0\22\32\1\307\17\32\22\0\3\32\3\0\17\32"+
    "\1\251\22\32\22\0\3\32\3\0\20\32\1\310\21\32"+
    "\22\0\3\32\3\0\1\55\41\32\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\36\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\37\1\1\0\1\11\173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 13: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 14: break;
          case 3:
            { switch (yytext()) {
        case "&" :return token(yytext(), "SEP", yyline, yycolumn);
        case "_" :return token(yytext(), "GBAJO", yyline, yycolumn);
        case "==": return token(yytext(), "IGUALDAD", yyline, yycolumn);
        case "!=": return token(yytext(), "DESIGUALDAD", yyline, yycolumn);
        case ">>": return token(yytext(), "MAYORQUE", yyline, yycolumn);
        case "<<": return token(yytext(), "MENORQUE", yyline, yycolumn);
        case ">=": return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
        case "<=": return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
        case "&&": return token(yytext(), "ANDLOGICO", yyline, yycolumn);
        case "||": return token(yytext(), "ORLOGICO", yyline, yycolumn);
        case "!": return token(yytext(), "NOTLOGICO", yyline, yycolumn);
        case "=": return token(yytext(), "ASIGNACION", yyline, yycolumn);
        case "\'+": return token(yytext(), "INCREMENTO", yyline, yycolumn);
        case "\'-": return token(yytext(), "DECREMENTO", yyline, yycolumn);
        case "++": return token(yytext(), "SUMA", yyline, yycolumn);
        case "--": return token(yytext(), "RESTA", yyline, yycolumn);
        case "**": return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
        case "//": return token(yytext(), "DIVISION", yyline, yycolumn);
        case "%%": return token(yytext(), "MODULO", yyline, yycolumn);
        case "(": return token(yytext(), "PARA", yyline, yycolumn);
        case ")": return token(yytext(), "PARC", yyline, yycolumn);
        case "{": return token(yytext(), "CORA", yyline, yycolumn);
        case "}": return token(yytext(), "CORC", yyline, yycolumn);
        case "[": return token(yytext(), "PARCUAA", yyline, yycolumn);
        case "]": return token(yytext(), "PARCUAC", yyline, yycolumn);
        case ".": return token(yytext(), "PUNTODECIMAL", yyline, yycolumn);
        case ";": return token(yytext(), "FINLINEA", yyline, yycolumn);
        case ",": return token(yytext(), "SEPARADOR", yyline, yycolumn);
        case "\"": return token(yytext(), "COMILLA", yyline, yycolumn);
        case "'": return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
        case "$": return token(yytext(), "DINERO", yyline, yycolumn);
    }
            }
            // fall through
          case 15: break;
          case 4:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 16: break;
          case 5:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 17: break;
          case 6:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 18: break;
          case 7:
            { switch(yytext()) {
        case "VARIABLES": return token(yytext(), "VARIABLES", yyline, yycolumn);
        case "PROCESOS": return token(yytext(), "PROCESOS", yyline, yycolumn);
        /* Operaciones básicas */
        case "SUMA": return token(yytext(), "SUMA", yyline, yycolumn);
        case "RESTA": return token(yytext(), "RESTA", yyline, yycolumn);
        case "MULTIPLICACION": return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
        case "DIVISION": return token(yytext(), "DIVISION", yyline, yycolumn);
        case "MODULO": return token(yytext(), "MODULO", yyline, yycolumn);
        /* Operaciones avanzadas */
        case "POTENCIA": return token(yytext(), "POTENCIA", yyline, yycolumn);
        case "RAIZ_C": return token(yytext(), "RAIZ_CUADRADA", yyline, yycolumn);
        case "RAIZ_N": return token(yytext(), "RAIZ_ENESIMA", yyline, yycolumn);
        case "LN": return token(yytext(), "LOGARITMO_NATURAL", yyline, yycolumn);
        case "LOG10": return token(yytext(), "LOGARITMO_BASE_10", yyline, yycolumn);
        case "EXP": return token(yytext(), "EXPONENCIAL", yyline, yycolumn);
        /* Operaciones trigonométricas */
        case "SEN": return token(yytext(), "SENO", yyline, yycolumn);
        case "COS": return token(yytext(), "COSENO", yyline, yycolumn);
        case "TAN": return token(yytext(), "TANGENTE", yyline, yycolumn);
        case "ARCSEN": return token(yytext(), "ARCOSENO", yyline, yycolumn);
        case "ARCCOS": return token(yytext(), "ARCOCOSENO", yyline, yycolumn);
        case "ARCTAN": return token(yytext(), "ARCOTANGENTE", yyline, yycolumn);
        case "SEN_H": return token(yytext(), "SENO_HIPERBOLICO", yyline, yycolumn);
        case "COS_H": return token(yytext(), "COSENO_HIPERBOLICO", yyline, yycolumn);
        case "TAN_H": return token(yytext(), "TANGENTE_HIPERBOLICA", yyline, yycolumn);
        /* Funciones matemáticas */
        case "ABS": return token(yytext(), "VALOR_ABSOLUTO", yyline, yycolumn);
        case "FACT": return token(yytext(), "FACTORIAL", yyline, yycolumn);
        case "REDONDEO": return token(yytext(), "REDONDEO", yyline, yycolumn);
        case "REDONDEO_MENOS": return token(yytext(), "REDONDEO_HACIA_ABAJO", yyline, yycolumn);
        case "REDONDEO_MAS": return token(yytext(), "REDONDEO_HACIA_ARRIBA", yyline, yycolumn);
        case "MCD": return token(yytext(), "MAXIMO_COMUN_DIVISOR", yyline, yycolumn);
        case "MCM": return token(yytext(), "MINIMO_COMUN_MULTIPLO", yyline, yycolumn);
        /*Comparación*/
        case "IGUAL_A": return token(yytext(), "IGUAL_A", yyline, yycolumn);
        case "DIFERENTE_QUE": return token(yytext(), "DIFERENTE_QUE", yyline, yycolumn);
        case "MAYOR_QUE" : return token(yytext(), "MAYOR_QUE", yyline, yycolumn);
        case "MENOR_QUE" : return token(yytext(), "MENOR_QUE", yyline, yycolumn);
        case "MAYOR_O_IGUAL_QUE": return token(yytext(), "MAYOR_O_IGUAL_QUE", yyline, yycolumn);
        case "MENOR_O_IGUAL_QUE": return token(yytext(), "MENOR_O_IGUAL_QUE", yyline, yycolumn);
        /* Operaciones de estadísticas */
        case "MEDIANA": return token(yytext(), "MEDIANA", yyline, yycolumn);
        case "VAR": return token(yytext(), "VAR", yyline, yycolumn);
        case "DESVESTA": return token(yytext(), "DESVIACION_ESTANDAR", yyline, yycolumn);
        case "PROMEDIO": return token(yytext(), "PROMEDIO", yyline, yycolumn);
        case "SI": return token(yytext(), "SI", yyline, yycolumn);
        case "REPETIR": return token(yytext(), "REPETIR", yyline, yycolumn);
        case "MIENTRAS": return token(yytext(), "MIENTRAS", yyline, yycolumn);
        case "verdadero": return token(yytext(), "VERDADERO", yyline, yycolumn);
        case "falso": return token(yytext(), "FALSO", yyline, yycolumn);
    }
            }
            // fall through
          case 19: break;
          case 8:
            { return token(yytext(), "NDECIMAL", yyline, yycolumn);
            }
            // fall through
          case 20: break;
          case 9:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
            // fall through
          case 21: break;
          case 10:
            { return token(yytext(), "ENTERO", yyline, yycolumn);
            }
            // fall through
          case 22: break;
          case 11:
            { return token(yytext(), "DECIMAL", yyline, yycolumn);
            }
            // fall through
          case 23: break;
          case 12:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
